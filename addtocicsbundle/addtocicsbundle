#!/bin/bash
#############################################################################################
# Script to add Java pre-built arhcive files to a CICS bundle
#
# Licensed Materials - Property of IBM.
# (c) Copyright IBM Corporation 2017. All Rights Reserved.
# US Government Users Restricted Rights
# Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corporation
#############################################################################################

show_usage () {
	echo -e "Usage:\t"$(basename "$0") "[-hv] [-j JVMSERVER] [-V VERSION] -a FILES DIRECTORY"
}

show_help () {
	show_usage
	echo
	echo "Add Java pre-built archive files to the CICS bundle specified by DIRECTORY."
	echo
	echo "Options:"
	echo -e "\t-a FILES, --add\t\t\tFiles or directory of files to add to the CICS bundle"
	echo -e "\t-h, --help\t\t\tHelp"
	echo -e "\t-j JVMSERVER, --jvmserver\tCICS JVMSERVER resource name"
	echo -e "\t\t\t\t\tThe default is DFHWLP for files with .war .ear .eba extensions, and DFHOSGI .jar extensions"
	echo -e "\t-V VERSION, --version\t\tSet the bundle version in major.minor.micro format"
	echo -e "\t-v, --verbose\t\t\tVerbose messages"
	echo -e "\tDIRECTORY is the CICS bundle directory"
}

# Function to create an empty CICS bundle
create_bundle() {
	# Create the CICS bundle directory
	mkdir -p "${MANIFEST_DIRECTORY}"
	
	if [[ ! -d "${DIRECTORY}" ]] ; then
		echo "Could not create CICS bundle manifest directory ${MANIFEST_DIRECTORY}"
		exit 1
	fi
	
	# Create the CICS bundle manifest file
	MANIFEST_TIMESTAMP=$(date +"%Y-%m-%dT%T.%3N%:z")

	if [[ $VERBOSE == 1 ]] ; then
		echo "Creating CICS bundle manifest file ${MANIFEST}"
	fi
	
	cat > "${MANIFEST}" <<EOF
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<manifest xmlns="http://www.ibm.com/xmlns/prod/cics/bundle" id="${SYMBOLICNAME}" bundleMajorVer="1" bundleMinorVer="0" bundleMicroVer="0" bundleVersion="1" bundleRelease="0">
    <meta_directives>
        <timestamp>$MANIFEST_TIMESTAMP</timestamp>
    </meta_directives>
</manifest>
EOF
} 

# Get the value from a property in a .properties file
# Modified technique from http://shrubbery.homeip.net/c/display/W/Reading+Java-style+Properties+Files+with+Shell
get_property () {
	# If properties file does not exist, just exit
	if [[ ! -f $2 ]] ; then
		exit
	fi
	
	echo `sed '/^\#/d' $2 | grep "${1}*=" | tail -n 1 | cut -d "=" -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'`
}

# Function to add a file to a CICS bundle
add_file_to_cics_bundle() { 
	FILENAME=$(basename "${FILE}")
	FILEEXTENSION="${FILENAME##*.}"
		
	if [[ "${FILEEXTENSION}" = "jar" ]] ; then
		# Use the OSGi manifest symbolic name and bundle version as the defaults for the CICS bundle
		SYMBOLICNAME=$(unzip -p "${FILE}" "META-INF/MANIFEST.MF" | grep "Bundle-SymbolicName" | cut -d ":" -f 2 | tr -d '[:space:]')
		BUNDLEPARTVERSION=$(unzip -p "${FILE}" "META-INF/MANIFEST.MF" | grep "Bundle-Version" | cut -d ":" -f 2 | tr -d '[:space:]')

		if [[ -z "${BUNDLEVERSION}" ]] ; then
			BUNDLEVERSION="${BUNDLEPARTVERSION}"
		fi
	else
		SYMBOLICNAME="${FILENAME%.*}"
	fi
	
	if [[ ! -d "${DIRECTORY}" ]] ; then
		create_bundle
	fi
	
	# Set the bundle part JVMSERVER
	if [[ -z "${JVMSERVER}" ]] ; then
		if [[ "${FILEEXTENSION}" = "jar" ]] ; then
			BUNDLEPARTJVMSERVER="DFHOSGI"
		else
			BUNDLEPARTJVMSERVER="DFHWLP"
		fi
	else
		BUNDLEPARTJVMSERVER="${JVMSERVER}"
	fi
	BUNDLEPARTJVMSERVERPROPERTY="jvmserver.${BUNDLEPARTJVMSERVER}"

	# Relate the file type to the CICS bundle part type
  	case "${FILEEXTENSION}" in
    	"jar")
    		BUNDLEPARTEXTENSION="osgibundle"
    		BUNDLEPART=$'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<'${BUNDLEPARTEXTENSION}' symbolicname="'${SYMBOLICNAME}'" version="'${BUNDLEPARTVERSION}'" jvmserver="${'${BUNDLEPARTJVMSERVERPROPERTY}'}"/>'
    		;;
    	"war")
    		BUNDLEPARTEXTENSION="warbundle"
		BUNDLEPART=$'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<'${BUNDLEPARTEXTENSION}' symbolicname="'${SYMBOLICNAME}'" jvmserver="${'${BUNDLEPARTJVMSERVERPROPERTY}'}"/>'
    		;;
    	"ear")
    		BUNDLEPARTEXTENSION="earbundle"
		BUNDLEPART=$'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<'${BUNDLEPARTEXTENSION}' symbolicname="'${SYMBOLICNAME}'" jvmserver="${'${BUNDLEPARTJVMSERVERPROPERTY}'}"/>'
    		;;
    	"eba")
    		BUNDLEPARTEXTENSION="ebabundle"
		BUNDLEPART=$'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<'${BUNDLEPARTEXTENSION}' symbolicname="'${SYMBOLICNAME}'" jvmserver="${'${BUNDLEPARTJVMSERVERPROPERTY}'}"/>'
    		;;
    	*)
    		BUNDLEPARTEXTENSION=""
		;;
	esac
	
	if [[ -z "${BUNDLEPARTEXTENSION}" ]] ; then
		# Do not create a CICS bundle part if it was not a recognised type
		exit 8
	fi

	BUNDLEPARTTYPE="http://www.ibm.com/xmlns/prod/cics/bundle/${BUNDLEPARTEXTENSION^^}"
	BUNDLEPARTFILE="${DIRECTORY}/${SYMBOLICNAME}.${BUNDLEPARTEXTENSION}"

	# Check if bundle part already exists
	ENTRY=$(xmlstarlet sel -t -c '//_:define[@name="'"${SYMBOLICNAME}"'"][@type="'"${BUNDLEPARTTYPE}"'"]' "${MANIFEST}")
	if [[ ! -z "${ENTRY}" ]] ; then
		if [[ $VERBOSE == 1 ]] ; then
			echo "CICS bundle part ${SYMBOLICNAME} for type ${BUNDLEPARTTYPE} in ${MANIFEST} already exists"
		fi
	else
		# Create bundle part file
		if [[ $VERBOSE == 1 ]] ; then
			echo "Creating CICS bundle part file ${BUNDLEPARTFILE}"
		fi
		echo "${BUNDLEPART}" > "${BUNDLEPARTFILE}"

	   	# Add part to the CICS bundle manifest
		if [[ $VERBOSE == 1 ]] ; then
			echo "Adding bundle part to the CICS bundle manifest file ${MANIFEST}"
		fi
		xmlstarlet ed -L -s "//_:manifest" -t elem -n define -v "" \
			-i "//_:manifest/define" -t attr -n name -v "${SYMBOLICNAME}" \
			-i "//_:manifest/define" -t attr -n type -v "${BUNDLEPARTTYPE}" \
			-i "//_:manifest/define" -t attr -n path -v "${FILENAME}.${BUNDLEPARTEXTENSION}" \
			"${MANIFEST}"
			
		# Add JVMSERVER to properties file if it is not already defined
		PROPERTIES="${DIRECTORY}/variable.properties"

		if [[ -z $(get_property ${BUNDLEPARTJVMSERVERPROPERTY} ${PROPERTIES}) ]] ; then
			if [[ $VERBOSE == 1 ]] ; then
				echo "Adding property ${BUNDLEPARTJVMSERVERPROPERTY}=${BUNDLEPARTJVMSERVER} to ${PROPERTIES}"
			fi

			echo -e \
				"\n# Added by script" $(basename "$0") \
				"\n${BUNDLEPARTJVMSERVERPROPERTY}=${BUNDLEPARTJVMSERVER}" \
				>> "${PROPERTIES}"
		fi
	fi 

	# Copy file to be added into CICS bundle
	if [[ $VERBOSE == 1 ]] ; then
		echo "Copying file ${FILE} to ${DIRECTORY}"
	fi
	cp "${FILE}" "${DIRECTORY}"

	SYMBOLICNAME=""
}

# Function to add files to a CICS bundle
add_files_to_cics_bundle() { 
	for FILE in $FILES ; do
		MESSAGE=$(add_file_to_cics_bundle "${FILE}")
		RC=$?
  
		if [[ ! -z "${MESSAGE}" ]] ; then 
			echo -n -e "${MESSAGE}\n"
		fi

		TOTALRC=$((TOTALRC + RC))
	done
}

# Function to set the cics_bundle version
set_cics_bundle_version() { 
	# Validate VERSION parameter
	BUNDLEVERSIONARRAY=($(echo ${BUNDLEVERSION} | tr '.' ' '))
	BUNDLEMAJORVER=${BUNDLEVERSIONARRAY[0]}
	BUNDLEMINORVER=${BUNDLEVERSIONARRAY[1]}
	BUNDLEMICROVER=${BUNDLEVERSIONARRAY[2]}
	if [[ -z "${BUNDLEMAJORVER}" ]]; then
		BUNDLEMAJORVER="0"
	fi
	if [[ -z "${BUNDLEMINORVER}" ]]; then
		BUNDLEMINORVER="0"
	fi
	if [[ -z "${BUNDLEMICROVER}" ]]; then
		BUNDLEMICROVER="0"
	fi
	if [[ ! "${BUNDLEVERSION}" == "${BUNDLEMAJORVER}.${BUNDLEMINORVER}.${BUNDLEMICROVER}" ]]; then
		echo "Bundle version ${BUNDLEVERSION} is not in the required major.minor.micro format"
		exit 12
	fi

	if [[ $VERBOSE == 1 ]] ; then
		echo "Setting CICS bundle version to ${BUNDLEVERSION}"
	fi
	
	xmlstarlet edit -L \
		-u "//@bundleMajorVer" -v "${BUNDLEMAJORVER}" \
		-u "//@bundleMinorVer" -v "${BUNDLEMINORVER}" \
		-u "//@bundleMicroVer" -v "${BUNDLEMICROVER}" \
		"${MANIFEST}"
}

# Process script long options by transforming them to the short option equivalent
for arg in "$@" ; do
  	shift
  	case "$arg" in
    	"--add")
    		set -- "$@" "-a" ;;
    	"--jvmserver")
    		set -- "$@" "-j" ;;
    	"--version")
    		set -- "$@" "-V" ;;
    	"--verbose")
    		set -- "$@" "-v" ;;
    	"--help")
    		set -- "$@" "-h" ;;
    	*)
    	    set -- "$@" "$arg"
	esac
done

# Process script short options
VERBOSE=0
while getopts ":a:j:V:vh" opt ; do
	case "$opt" in
		a)
			FILES="${OPTARG}" ;;
		j)
			JVMSERVER="${OPTARG}" ;;
		V)
			BUNDLEVERSION="${OPTARG}" ;;
		v)
			VERBOSE=1 ;;
		h)
			show_help
			exit 0 ;;
	esac
done
shift $((OPTIND-1))

# The remainder of the command line is the CICS bundle directory
DIRECTORY=$@
MANIFEST_DIRECTORY="${DIRECTORY}/META-INF"
MANIFEST="${MANIFEST_DIRECTORY}/cics.xml"
TOTALRC=0

# Validate FILES parameter
if [[ -z "${FILES}" ]] ; then
	echo "FILES was not specified"
	show_usage
	exit 1
fi
# Expand ~ to HOME directory
FILES="${FILES/#\~/$HOME}"
if [[ -d "${FILES}" ]] ; then
	FILES="${FILES}/*"
fi

# Validate DIRECTORY parameter is a CICS bundle if the directory already exists
if [[ -z "${DIRECTORY}" ]] ; then
	echo "DIRECTORY was not specified"
	show_usage
	exit 1
elif [[ ! -d "${DIRECTORY}" ]] ; then
	# Directory will be created later
	:
elif [[ ! -f "${MANIFEST}" ]] ; then
	echo "Canot find manifest at ${MANIFEST}"
	show_usage
	exit 1
fi

add_files_to_cics_bundle

if [[ ! -z "${BUNDLEVERSION}" ]] ; then
	set_cics_bundle_version
fi

if [[ $VERBOSE == 1 ]] ; then
	echo "Summary for directory:"
	ls -lR ${DIRECTORY}

	echo "Exiting with RC=${TOTALRC}"
fi
exit ${TOTALRC}
